/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

declare class InternalPoloDbClient {
  constructor(path: string)
  collection(name: string): InternalPoloDbCollection
}
declare class InternalPoloDbCollection {
  insertOne(doc: string, callback: (err: null | Error, result: string) => void): void
  insertMany(docs: string[], callback: (err: null | Error, result: string) => void): void
  findOne(filter: string, callback: (err: null | Error, result: string | null) => void): void
  find(filter: string): InternalPoloDbCursor
  updateOne(filter: string, update: string, callback: (err: null | Error, result: string) => void): void
  updateMany(filter: string, update: string, callback: (err: null | Error, result: string) => void): void
  deleteOne(filter: string, callback: (err: null | Error, result: string) => void): void
  deleteMany(filter: string, callback: (err: null | Error, result: string) => void): void
}
declare class InternalPoloDbCursor {
  skip(n: number): this
  limit(n: number): this
  sort(sortDoc: string): this
  toArray(callback: (err: null | Error, result: string) => void): void
}

type ComparisonOperators<T> = {
    /** Matches values that are equal to a specified value. */
    $eq?: T;
    /** Matches values that are greater than a specified value. */
    $gt?: T;
    /** Matches values that are greater than or equal to a specified value. */
    $gte?: T;
    /** Matches values that are less than a specified value. */
    $lt?: T;
    /** Matches values that are less than or equal to a specified value. */
    $lte?: T;
    /** Matches all values that are not equal to a specified value. */
    $ne?: T;
    /** Matches any of the values specified in an array. */
    $in?: T[];
    /** Matches none of the values specified in an array. */
    $nin?: T[];
};
type StringOperators = {
    /** Matches values that are equal to the given regular expression. */
    $regex?: RegExp;
};
type OperatorType<T> = T extends number | Date ? T | ComparisonOperators<T> : T extends string ? T | ComparisonOperators<T> | StringOperators : T extends Array<unknown> ? T | ComparisonOperators<T> : T extends object ? Filter<T> : T | ComparisonOperators<T>;
type SimpleFilter<T> = {
    [P in keyof T]?: T[P];
};
type Filter<T> = {
    [P in keyof T]?: OperatorType<T[P]>;
} | {
    $or: SimpleFilter<T>[];
};

type NumericOperators<T> = {
    /** Increments the value of the field by the specified amount. */
    $inc?: T;
    /** Only updates the field if the specified value is less than the existing field value. */
    $min?: T;
    /** Only updates the field if the specified value is greater than the existing field value. */
    $max?: T;
    /** Multiplies the value of the field by the specified amount. */
    $mul?: T;
};
type RenameOperator = {
    /** Renames a field. */
    $rename?: Record<string, string>;
};
type SetOperator<T> = {
    /** Sets the value of a field in a document.  */
    $set?: Partial<T>;
};
type UnsetOperator<T> = {
    /** Removes the specified field from a document.  */
    $unset?: {
        [P in keyof T]?: '' | 1 | true;
    };
};
type FieldOperators<T> = T extends number ? T | NumericOperators<T> : T;
type Update<T> = {
    [P in keyof T]?: FieldOperators<T[P]>;
} & RenameOperator & SetOperator<T> & UnsetOperator<T>;

type Sort<T> = {
    [P in keyof T]?: number;
};
declare interface Record$1 {
    [key: string]: unknown;
}
declare class PoloDbClient {
    private client;
    constructor(path: string);
    collection<T = unknown>(name: string): PoloDbCollection<T>;
}
interface DeleteResult {
    deleted_count: number;
}
interface UpdateResult {
    matched_count: number;
    modified_count: number;
}
declare class PoloDbCollection<T = unknown> {
    private collection;
    constructor(client: InternalPoloDbClient, name: string);
    insertOne(doc: T): Promise<{
        inserted_id: string;
    }>;
    insertMany(docs: T[]): Promise<{
        inserted_ids: string[];
    }>;
    findOne(filter: Filter<T>): Promise<T | null>;
    find(filter: Filter<T>): PoloDbCursor<T>;
    updateOne(filter: Filter<T>, update: Update<T>): Promise<UpdateResult>;
    updateMany(filter: Filter<T>, update: Update<T>): Promise<UpdateResult>;
    deleteOne(filter: Filter<T>): Promise<DeleteResult>;
    deleteMany(filter: Filter<T>): Promise<DeleteResult>;
}
declare class PoloDbCursor<T = unknown> {
    private cursor;
    constructor(cursor: InternalPoloDbCursor);
    limit(limit: number): this;
    skip(skip: number): this;
    sort(sort: Sort<T>): this;
    toArray(): Promise<T[]>;
}

export { PoloDbClient, PoloDbCollection, type Record$1 as Record };
